CREATE DATABASE FINALGO;CREATE PROCEDURE createAllTablesAScreate table SystemUser (Username VARCHAR(20)  PRIMARY KEY, Password VARCHAR(20)) ;create table Stadium (ID int IDENTITY PRIMARY KEY, Location VARCHAR(20), name VARCHAR(20), capacity int, status bit) ;create table StadiumManager (Username VARCHAR(20), Name VARCHAR(20), ID int IDENTITY , stadium_ID int, PRIMARY KEY(Username), FOREIGN KEY (Username) references SystemUser(Username) on delete cascade on update cascade ,FOREIGN KEY (stadium_ID) references Stadium(ID) on delete cascade on update cascade) ;create table Club (ID int IDENTITY PRIMARY KEY, Location VARCHAR(20), name VARCHAR(20)) ;create table ClubRepresentative (Username VARCHAR(20), Name VARCHAR(20), ID int IDENTITY , club_ID int, PRIMARY KEY(Username), FOREIGN KEY (Username) references SystemUser(Username) on delete cascade on update cascade,FOREIGN KEY (club_ID) references CLub(ID) on delete cascade on update cascade) ;create table SportsAssociationManager (Username VARCHAR(20), Name VARCHAR(20), ID int IDENTITY ,PRIMARY KEY(Username), FOREIGN KEY (Username) references SystemUser(Username) on delete cascade on update cascade) ;create table SystemAdmin (Username VARCHAR(20), Name VARCHAR(20), ID int IDENTITY ,PRIMARY KEY(Username), FOREIGN KEY (Username) references SystemUser(Username) on delete cascade on update cascade) ;create table Fan (Username VARCHAR(20), Name VARCHAR(20), national_ID VARCHAR(20) ,phone_number int, address VARCHAR(20),status BIT ,birthdate date, PRIMARY KEY(Username), FOREIGN KEY (Username) references SystemUser(Username) on delete cascade on update cascade) ;create table Match (ID int IDENTITY PRIMARY KEY, start_time datetime, end_time datetime, attendees int, host_id int, guest_id int, stadium_id int, foreign key (host_id) references club(id) on delete cascade on update cascade,foreign key (guest_id) references club(id) on delete no action on update no action, foreign key (stadium_id) references stadium(id) on delete cascade on update cascade ) ; create table Tickets (ID int IDENTITY PRIMARY KEY , status bit, Fan_Username VARCHAR(20), Match_ID int, FOREIGN KEY (Fan_Username) references Fan(Username) on delete cascade on update cascade, FOREIGN KEY (Match_ID) references Match(ID) on delete cascade on update cascade ) ;create table Host_Request(id int primary key identity, match_id int, status varchar(20), stadium_manager_username varchar(20), club_representative_username varchar(20), foreign key(stadium_manager_username) references stadiummanager(username) on delete cascade on update cascade,  foreign key (club_representative_username) references clubrepresentative(username ) on delete no action on update no action);go;go ; CREATE PROCEDURE dropAllTablesASdrop table Host_Request, Tickets, match, Fan, SystemAdmin, SportsAssociationManager, ClubRepresentative,club, StadiumManager, Stadium,SystemUser ; go ;CREATE PROCEDURE dropAllProceduresFunctionsViewsASdrop procedure createAllTables ;drop procedure dropAllTables ;drop procedure clearAllTables ;drop procedure addAssociationManager ;drop procedure addNewMatch ;drop procedure deleteMatch ;drop procedure deleteMatchesOnStadium ;drop procedure addClub ;drop procedure addTicket ;drop procedure deleteClub ;drop procedure addStadium ;drop procedure deleteStadium ;drop procedure blockFan ;drop procedure unblockFan ;drop procedure addRepresentative ;drop procedure addHostRequest ;drop procedure addStadiumManager ;drop procedure acceptRequest ;drop procedure rejectRequest ;drop procedure addFan ;drop procedure purchaseTicket ;drop procedure updateMatchHost ;drop procedure deleteMatchesOnStadium ;drop function dbo.viewAvailableStadiumsOn ;drop function dbo.allUnassignedMatches ;drop function dbo.allPendingRequests ;drop function dbo.upcomingMatchesOfClub ;drop function dbo.availableMatchesToAttend ;drop function dbo.clubsNeverPlayed ;drop function dbo.matchWithHighestAttendance ;drop function dbo.matchesRankedByAttendance ;drop function dbo.requestsFromClub;drop view allAssocManagers ;drop view  allClubRepresentatives ;drop view allStadiumManagers;drop view allFans;drop view allMatches;drop view allTickets;drop view allCLubs;drop view allStadiums;drop view allRequests;drop view clubsWithNoMatches;drop view matchesPerTeam;drop view clubsNeverMatched;go;CREATE PROCEDURE clearAllTablesASdelete from systemadmin ; delete from  fan ; delete from tickets ;delete from host_request ;delete from match ;delete from Sportsassociationmanager ; delete from ClubRepresentative ; delete from Club ;delete from StadiumManager ;delete from Stadium ;delete from SystemUser; go;CREATE view allAssocManagersasselect SportsAssociationManager.username, SportsAssociationManager.name, SystemUser.passwordfrom SportsAssociationManager, SystemUser where SportsAssociationManager.Username = SystemUser.Username ; go ; CREATE view allClubRepresentativesasselect c.username, c.name, c.club_id , s.Passwordfrom ClubRepresentative c , SystemUser swhere c.Username = s.Username ; go ;CREATE view allStadiumManagersasselect s.username, s.name, s.stadium_ID, u.Passwordfrom StadiumManager s, SystemUser uwhere s.Username = u.Username ; go ;CREATE view allFansasselect f.name, f.national_id, f.birthdate, f.status, f.Username, u.Passwordfrom Fan f, SystemUser uwhere f.Username = u.Username ; go ; CREATE view allMatchesasselect H.name as HostClub, G.name as GuestClub, match.start_timefrom Match, Club H, Club Gwhere match.host_id = H.ID and match.guest_id=G.id ; go ;CREATE view allTicketsasselect X.name as guestname, Y.name as hostname, match.start_time, Stadium.namefrom Club X, Club Y, match, Tickets, Stadiumwhere Tickets.Match_ID = Match.ID and Match.guest_id = X.ID and Match.host_id=Y.id and match.stadium_id =Stadium.ID ;go ;create view allCLubsasselect name, locationfrom Club ; go ;create view allStadiumsasselect name, location, capacity,statusfrom Stadium ; go ;CREATE view allRequestsasselect StadiumManager.Username as Stadium_Manager_username, ClubRepresentative.Username as club_representative_username,Host_Request.statusfrom Host_Request, StadiumManager, ClubRepresentative where Host_Request.stadium_manager_username=StadiumManager.Username and Host_Request.club_representative_username=ClubRepresentative.Username ; go ;CREATE PROCEDURE addAssociationManager@name varchar(20),@username varchar(20),@password varchar(20) ASINSERT into SystemUser (Username,Password) values (@username, @password) INSERT into SportsAssociationManager(Username, Name) values (@username, @name) ;go; go;CREATE PROCEDURE addNewMatch@club1 varchar(20),@club2 varchar(20),@date datetime ,@date2 datetimeASdeclare @club1_id intselect @club1_id = c. idfrom club cwhere c.name=@club1declare @club2_id intselect @club2_id = c. idfrom club cwhere c.name=@club2INSERT into Match (start_time,end_time,guest_id,host_id) values (@date,@date2, @club2_id,@club1_id)Go;CREATE VIEW clubsWithNoMatchesASselect c.namefrom Club c except select c2.name from club c2where c2.id = any( select m.guest_id from match m ) or c2.id = any( select m.host_id from match m ); go;GO;CREATE PROCEDURE deleteMatch@club1 varchar(20),@club2 varchar(20)ASdeclare @club1_id intselect @club1_id = c. idfrom club cwhere c.name=@club1declare @club2_id intselect @club2_id = c. idfrom club cwhere c.name=@club2delete from match where host_id=@club1_id and guest_id=@club2_id ;go;CREATE PROCEDURE deleteMatchesOnStadium@stadiumname varchar(20)asdeclare @stadium_id intselect @stadium_id = s.idfrom Stadium swhere s.name=@stadiumnamedelete from match where stadium_id = @stadium_id and start_time > CURRENT_TIMESTAMP ; go;CREATE PROCEDURE addClub@clubname varchar(20),@location varchar(20)asinsert into Club (name,Location) values (@clubname,@location) ; go;CREATE PROCEDURE addTicket@hostname varchar(20),@guestname varchar(20),@time datetimeasdeclare @hostid intselect @hostid = c. idfrom club cwhere c.name=@hostnamedeclare @guestid intselect @guestid = c2. idfrom club c2where c2.name=@guestnamedeclare @matchid intselect @matchid = m.idfrom match mwhere m.start_time = @time and m.host_id =@hostid and m.guest_id = @guestidinsert into tickets (Match_ID,status) values (@matchid,1); go ;create procedure deleteClub@clubname varchar(20)asdelete from Club where club.name = @clubname ;go;CREATE PROCEDURE addStadium@StadiumName varchar(20),@StadiumLocation varchar(20),@StadiumCapacity int asinsert into Stadium (name,Location,capacity,status) values (@StadiumName,@StadiumLocation,@StadiumCapacity,1) ; go;CREATE PROCEDURE deleteStadium@StadiumName varchar(20) asdelete from Stadium where name = @StadiumName;go ;CREATE PROCEDURE blockFan@nationIDno varchar(20) asupdate Fan set status = 0 where national_ID = @nationIDno ;go;CREATE PROCEDURE unblockFan@nationIDno varchar(20) asupdate Fan set status = 1where national_ID = @nationIDno ; go;go;CREATE PROCEDURE addRepresentative@RepName varchar(20),@ClubName varchar(20),@UserName varchar(20),@Password  varchar(20)asdeclare @clubid intselect @clubid = c.idfrom club cwhere c.name=@clubnameINSERT into SystemUser (Username,Password) values (@username, @password) INSERT into ClubRepresentative(Username, Name, club_id) values (@username, @RepName, @clubid);go;create function viewAvailableStadiumsOn(@date_time datetime)returns table asreturn   select s.name, s.Location,s.Capacity   from stadium s   where s.Status=1 and s.id not in(select m.Stadium_id from  match m where s.id=m.Stadium_id and @date_time=m.Start_time)go;CREATE PROCEDURE addHostRequest@ClubName varchar(20),@StadiumName varchar(20),@StartTime datetime asdeclare @stadiumid intselect @stadiumid = s.IDfrom Stadium Swhere S.name=@StadiumNamedeclare @stadium_manager_name varchar(20)select @stadium_manager_name = s.Usernamefrom StadiumManager Swhere s.stadium_ID=@stadiumiddeclare @clubid intselect @clubid = s.IDfrom club Swhere S.name=@ClubNamedeclare @clubrep varchar(20)select @clubrep = s.Usernamefrom ClubRepresentative Swhere s.club_ID=@clubiddeclare @matchid intselect @matchid = s.IDfrom match Swhere s.start_time =@StartTime and s.host_id = @clubid insert into Host_Request(match_id,status,stadium_manager_username,club_representative_username) values (@matchid,'unhandled',@stadium_manager_name,@clubrep);go;CREATE Function allUnassignedMatches(@ClubName varchar(20))RETURNS @ans table(guestname VARCHAR(20), starttime datetime)asBEGIN declare @hostid intselect @hostid = c.idfrom club cwhere c.name = @ClubNameinsert into @ans SELECT s.name ,m.start_timeFROM club s, match mWHERE m.host_id=@hostid and m.guest_id=s.ID and (m.stadium_id IS NULL)returnEND GO; create procedure addStadiumManager@name varchar(20),@stad_name varchar(20),@user_name varchar(20),@password varchar(20)ASdeclare @stadium_id intselect @stadium_id = s.idfrom Stadium swhere s.name=@stad_nameINSERT INTO  SystemUser VALUES (@user_name, @password) ;INSERT INTO StadiumManager (Username,Name,stadium_ID) VALUES (@user_name,@name,@stadium_id);GO ;CREATE FUNCTION allPendingRequests(@stad_manager varchar(20))RETURNS TABLEasreturn select cr.name as club_representative, c.name as club_name , m.start_timefrom clubrepresentative cr , Club c , match m , host_request ,StadiumManager SMwhere cr.Username = Host_Request.club_representative_username ANDHost_Request.stadium_manager_username = @stad_managerANDhost_request.match_id=m.idANDm.guest_id=c.idANDhost_request.status = 'unhandled' GO ; CREATE PROCEDURE acceptRequest@username varchar(20),@host_club_name varchar(20),@guest_club_name varchar(20),@start_time datetimeASdeclare @host_id INTselect @host_id = c.id from club cwhere c.name= @host_club_namedeclare @guest_id INTselect @guest_id = c.id from club cwhere c.name= @guest_club_namedeclare @match_id INTselect @match_id = m.idfrom match mwherem.start_time = @start_timeANDm.host_id = @host_idANDm.guest_id = @guest_iddeclare @stadium varchar(20)select @stadium = s.idfrom stadium s, StadiumManager smwhere sm.stadium_ID = s.id and sm.Username = @username UPDATE host_request SET status = 'accepted'WHEREhost_request.stadium_manager_username = @username ANDhost_request.match_id= @match_id;update Match set stadium_id = @stadium where id = @match_id DECLARE @capacity INTselect @capacity = s.capacityfrom stadium swhere s.ID = @stadiumWHILE ( @capacity > 0)BEGIN    exec addTicket @host_club_name, @guest_club_name, @start_time    SET @capacity  = @capacity  - 1ENDGO; CREATE PROCEDURE rejectRequest@username varchar(20),@host_club_name varchar(20),@guest_club_name varchar(20),@start_time datetimeASdeclare @host_id INTselect @host_id = c.id from club cwhere c.name= @host_club_namedeclare @guest_id INTselect @guest_id = c.id from club cwhere c.name= @guest_club_namedeclare @match_id INTselect @match_id = m.idfrom match mwherem.start_time = @start_timeANDm.host_id = @host_idANDm.guest_id = @guest_idUPDATE host_request SET status = 'rejected'WHEREhost_request.stadium_manager_username = @usernameANDhost_request.match_id = @match_id ; GO;CREATE PROCEDURE addFan@name varchar(20),@username varchar(20),@password varchar(20),@national_id varchar(20),@birth_date datetime,@address varchar(20),@phone_number INTASinsert into SystemUser values (@username,@password) ;INSERT INTO fan (username,Name,national_ID,phone_number,address,status,birthdate) VALUES (@username, @name, @national_id,@phone_number,@address,1,@birth_date) ;GO;CREATE FUNCTION upcomingMatchesOfClub(@club_name varchar(20))RETURNS TABLEasreturn select c.name as club1 ,c2.name as club2, m.start_time, s.namefrom Club c ,club c2,  match m , stadium s where c.name = @club_nameAND((m.guest_id =c2.id andm.host_id = c.id) or (m.host_id=c2.id and m.guest_id=c.id))andm.stadium_id = s.IDand m.start_time > CURRENT_TIMESTAMPgo ; CREATE PROCEDURE updateMatchHost@host varchar(20),@guest varchar(20),@StartTime datetime asdeclare @hostid intselect @hostid = c.idfrom club cwhere c.name = @host declare @guestid intselect @guestid = c.idfrom club cwhere c.name = @guest update matchset host_id = @guestid where host_id = @hostid and guest_id = @guestid and start_time= @starttime ; update matchset guest_id = @hostid where host_id = @guestid and guest_id = @guestid and start_time= @starttime ; go ; CREATE FUNCTION availableMatchesToAttend(@date datetime)RETURNS TABLEreturnselect distinct c1.name as host , c2.name as guest , m.start_time , s.name as stadiumfrom club c1 , club c2 , match m , stadium s , tickets twherem.start_time >= @dateANDm.host_id = c1.idANDm.guest_id =c2.idANDm.stadium_id = s.IDAND t.match_id = m.idANDt.status = 1go; create procedure purchaseticket@fan_nid varchar(20), @host_name varchar(20),@guest_name varchar(20), @date datetimeasDeclare @fan_username varchar(20)select @fan_username= f.Usernamefrom Fan Fwhere @fan_nid = f.national_IDDeclare @fan_status varchar(20)select @fan_status =  f.statusfrom Fan Fwhere @fan_nid = f.national_IDif @fan_status = '1' begindeclare @host_id intselect @host_id = c.IDfrom Club cwhere @host_name = c.namedeclare @guest_id intselect @guest_id = c.IDfrom Club cwhere @guest_name = c.nameDeclare @match_ID intselect @match_ID= m.IDfrom Match mwhere m.start_time = @dateAND@host_id = m.host_idAND@guest_id = m.guest_iddeclare @ticketid intselect @ticketid = t.idfrom Tickets twhere t.Match_ID = @match_ID and t.status = '1'update Ticketsset status = '0'where tickets.ID = @ticketid update Ticketsset Fan_Username = @fan_usernamewhere tickets.ID = @ticketid end; go;create view matchesPerTeam asselect c.name, count(m.ID) as 'matches_played'from club c left outer join match m on m.guest_id = c.id or m.host_id = c.idwhere m.end_time < CURRENT_TIMESTAMPgroup by c.name;GO;CREATE VIEW clubsNeverMatched ASSELECT c1.name as club1 ,c2.name as club2FROM club c1, club c2where c1.id > c2.id and not exists (select c11.name, c22.name				from match m inner join club c11 on m.host_ID = c11.id 				inner join club c22 on m.guest_id = c22.id				where (c11.id = c1.id and c22.id = c2.id) OR (c11.id  = c2.id and c22.id = c1.id));GO;CREATE FUNCTION clubsNeverPlayed(@cname varchar(20))Returns @neverPlayed table(club_name varchar(20))AS BeginINSERT INTO @neverPlayedSELECT c2.name as club_nameFROM club c2EXCEPT (        SELECT c22.name as club        FROM club c11, MATCH m, club c22        WHERE c11.name=@cname  and         ((c11.id=m.host_ID and c22.id=m.guest_id) or (c22.id=m.host_ID and c11.ID=m.guest_id)))delete from @neverPlayed where club_name = @cnameReturn END;go;CREATE FUNCTION matchWithHighestAttendance()Returns @highestAttendance table(club_host_name varchar(20), club_guest_name varchar (20))AS BeginINSERT INTO @highestAttendanceSELECT h.name as hostName ,g.name as guestNameFROM club g inner join match m on m.guest_id = g.idinner join club h on m.host_ID = h.idWHERE attendees = (select Max(attendees) from match);Return END;go;CREATE FUNCTION matchesRankedByAttendance ()Returns @rankAttendance table(club_host_name varchar(20), club_guest_name varchar (20))AS BeginINSERT INTO @rankAttendanceSELECT h.name as hostName ,g.name as guestNameFROM club g inner join match m on m.guest_id = g.idinner join club h on m.host_ID = h.idORDER BY attendees desc;Return END;go;CREATE FUNCTION  requestsFromClub (@stad_name varchar(20), @club_name varchar(20))Returns @clubrequests table(host_name varchar(20),guest_name varchar(20))AS BeginINSERT INTO @clubrequestsSELECT distinct h.name , g.nameFROM Host_Request r inner join StadiumManager man on r.stadium_manager_username = man.username inner join stadium son s.ID = man.stadium_Id inner join ClubRepresentative rep on r.club_representative_username = rep.username inner join club h on rep.club_ID = h.id inner join match m on m.host_id = h.id inner joinclub g on g.id = m.guest_idwhere s.name = @stad_name and h.name = @club_name;Return END;go;CREATE PROCEDURE userLogin@id varchar(20),@password varchar(20),@success bit output,@type int outputasbeginset @success = 0 ifexists(select Username, Passwordfrom SystemUserwhere @id=Username and @password= Password)beginset @success = 1end ;IF @success = 1 and  EXISTS(    SELECT username    FROM SportsAssociationManager    WHERE @id = username)    begin     set @type =1     end ; else   IF @success = 1 and EXISTS(    SELECT username    FROM ClubRepresentative    WHERE @id = username) begin    set @type =2    end ;   else IF @success = 1 and EXISTS(    SELECT username    FROM StadiumManager    WHERE @id = username) begin    set @type =3    end;else    IF @success = 1 and EXISTS(    SELECT username    FROM Fan    WHERE @id = username)begin    set @type =4    end;else    IF @success = 1 and EXISTS(    SELECT username    FROM SystemAdmin    WHERE @id = username)begin    set @type =5    end;end ;go;insert into systemuser values ('systemadmin' , 'systemadmin')insert into SystemAdmin values ('systemadmin', 'systemadmin')